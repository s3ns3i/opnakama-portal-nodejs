#!/usr/bin/env node
/* eslint-disable no-console */

/**
 * Module dependencies.
 */
const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const socketio = require('./socketio');
const sequelize = require('./sequelize');
const app = require('../app');

const env = process.env.NODE_ENV || 'development';
// eslint-disable-next-line import/no-dynamic-require
const config = require(`${__dirname}/../config/config.json`)[env];

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.app_port || '3002');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Create HTTP server.
 */

let server = null;
if (process.env.NODE_ENV) {
  server = https.createServer({
    key: fs.readFileSync(
      path.resolve(
        config.ssl_key_path,
        config.ssl_key,
      ),
    ),
    cert: fs.readFileSync(
      path.resolve(
        config.ssl_cert_path,
        config.ssl_cert,
      ),
    ),
  }, app);
} else {
  server = http.createServer(app);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
}

/**
 * Init socket.io
 */
socketio(server);

/**
 * Init sequelize
 */
sequelize();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);
